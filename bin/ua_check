#!/usr/bin/env ruby
require 'net/ssh'
require 'colored'
require 'netid-tools'
require 'optparse'
require 'terminal-table'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: ua_check [options]"

  opts.on("-c", "--concise", "Concise Results") do |c|
    options[:concise] = c
  end
  opts.on("-d", "--debug", "Run in debug (verbosely)") do |d|
    options[:debug] = d
  end
  opts.on("-p", "--processes", "View running processes on UA dev systems") do |p|
    options[:processes] = p
  end
end.parse!

raise "No NetID(s) specified. Bailing." if ARGV.empty?

user = ARGV.map{|n| n.downcase}
user.each do |netid|
  unless Netid.validate_netid?(netid)
    puts "#{netid} is not a valid NetID! Exiting."
    exit 1
  end
end

system_user = `whoami`.chomp
system_hostname = `hostname`.chomp

hosts = [ "ovid01.u.washington.edu",
  "ovid02.u.washington.edu",
  "ovid03.u.washington.edu",
  "vergil.u.washington.edu"
]

puts "Running UA Check for on behalf of #{system_user}\n".green

user.each do |netid|
  puts "#{netid}".bold.green
  puts "-"*netid.length
  results = 0
  checkr = Netid.new(netid,system_user)
  hosts.each do |host|
    result = checkr.check_for_mysql_presence(host)
    if result
      results += 1
      puts "MySQLd detected on #{result[0]}:#{result[1]}".blue
    end
  end

  result = checkr.check_for_localhome
  if result
    puts "Localhome: #{result}".cyan
  else
    puts "No localhome detected"
  end

  puts "Webtypes set: #{checkr.check_webtype}"

  puts "No MySQLds Detected".bold.blue if results == 0

  if options[:processes]
    hosts.each do |host|
      processes = checkr.get_processes(host)
      if processes
        table = Terminal::Table.new do |t|
          t.title = host
          t.headings = processes.headers
          processes.processes.each do |p|
            if p[9].length > 80
              p[9].slice!(80,p[9].length-80)
            end
            t << p
          end
        end

      end
      puts table
    end
  end

  unless options[:concise]
    puts "\n"
    raw_quota = checkr.check_quota
    headers = raw_quota.rotate!.pop
    table = Terminal::Table.new do |t|
      t.headings = headers
      raw_quota.each do |line|
        if line[1].to_f > line[2].to_f
          line[1] = "#{line[1]} (Over Quota!)"
        end
        t << line
      end
    end
    puts table
  end
  puts "\n"
end
